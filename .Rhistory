<<<<<<< HEAD
install.packages("httr") # once per machine
=======
print(p_full_uri)
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
View(results)
View(results)
reps <- results$results
View(reps)
reps_gender <- reps %>%
select(name, gender)
View(reps_gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
View(specific_rep)
spec_name <- specific_rep$name
spec_id <- specific_rep$id
member <- paste0(p_base_uri, p_endpoing, "/", spec_id, ".json")
member <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
member <- response <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes <- response <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
View(votes)
View(votes)
member <- member$results
votes <- votes$results
View(votes)
View(specific_rep)
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes$votes
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$votes
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$results$votes
View(votes)
votes <- votes$results
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes[["results"]][["votes"]][[1]]
votes <- votes$results$votes
View(votes)
votes <- votes$results$votes[1]
votes <- votes[["results"]][["votes"]][[1]]
votes <- votes[["results"]][["votes"]][[1]]
View(votes[["results"]][["votes"]][[1]])
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes[["results"]][["votes"]][[1]]
View(votes)
source("civic-info.R")
source("propublica.R")
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
>>>>>>> 291daa42337d307b1cd052738c2ad4489759a3da
library("httr")
install.packages("jsonlite") # once per machine
library("jsonlite")
shiny::runApp('C:/Users/Phung Phu/Dropbox/info201/final_project')
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
library(syuzhet)
library(countrycode)
library(DT)
runApp('C:/Users/Phung Phu/Dropbox/info201/final_project')
runApp('C:/Users/Phung Phu/Dropbox/info201/final_project')
runApp('C:/Users/Phung Phu/Dropbox/info201/final_project')
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
<<<<<<< HEAD
library(syuzhet)
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
library(syuzhet)
library(countrycode)
library(DT)
setwd("C:/Users/Phung Phu/Dropbox/info201/final_project")
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
library(syuzhet)
library(countrycode)
library(DT)
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
library(syuzhet)
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
library(syuzhet)
=======
find_sim <- function(artist_name, song_name) {
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
write.table(song_lyrics, "lyrics.txt",
row.names = FALSE,
quote = FALSE,
col.names = FALSE)
bestsongsim <- songsim("lyrics.txt", colorfulMode = TRUE,
mainTitle = paste0(song_name, " - ", artist_name))
bestsongsim
}
ans <- find_sim("MAGIC!", "Rude")
ans <- find_sim("Afterglow", "Scarlet Sky")
ans <- find_sim("One Direction", "What Makes You Beautiful")
shiny::runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop/final_project')
runApp('Desktop/final_project')
runApp('Desktop/final_project')
shiny::runApp('Desktop/final_project')
shiny::runApp('Desktop/final_project')
rainbow()
# Test Code
n <- get_sent("Post Malone", "rockstar")
View(n)
palette_fn <- colorFactor(palette = "Set1")
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = palette_fn
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = palette("Set1"),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
g <- get_graph(n)
View(g)
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.5),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = colors(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = colors(10),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
setwd("~/Desktop/final_project")
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
library(genius)
library(tidyverse)
library(dplyr)
library(songsim)
library(syuzhet)
get_sent <- function(artist_name, song_name) {
song_name <- gsub("\\s*\\[[^\\)]+\\]","", song_name)
song_name <- gsub("\\s*\\([^\\)]+\\)","", song_name)
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
words <- song_lyrics$lyric
nrc <- get_nrc_sentiment(words)
nrc
}
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
shiny::runApp()
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
runApp()
runApp()
# ui.R
>>>>>>> 291daa42337d307b1cd052738c2ad4489759a3da
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
<<<<<<< HEAD
library(syuzhet)
library(countrycode)
library(DT)
world_top <- read.csv("data/world_charts_1_9_2018.csv", stringsAsFactors = FALSE)
world_top <- world_top %>%
filter(Region != "global")
world_top <- mutate(world_top, country_name = countrycode(world_top$Region,
"iso2c", "country.name"))
View(world_top)
world_top %>%
group_by(Artist)
View(.Last.value)
top_by_region <- world_top %>%
group_by(Region) %>%
filter(Streams == max(Streams))
View(top_by_region)
View(world_top)
world_top %>%
group_by(Artist) %>%
count(Streams)
view(.Last.value)
unique(world_top$Artist)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
count(Streams)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Track.Name)
View(.Last.value)
class(world_top)
class(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Track)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Track.Name)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Track.Name)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
count(Streams)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
sum(Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
sum(Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist)
sum(Streams)
get_streams <- function(artist) {
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
sum(Streams)
}
get_streams("Post Malone")
class(world_top$Streams)
sum(world_top$Streams)
artist <- "Post Malone"
artist <- "Eason Chan"
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
sum(Streams)
class(world_top$Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
lapply(Streams, as.numeric)
colnames(world_top)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
colSums(Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist)
ec <-   world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist)
View(ec)
class(ec)
colnames(ec)
class(ec$Streams)
sum(ec$Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
lapply(Streams, sum)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist)
colnames(ec$Streams)
ec <-   world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist)
}
ec <-world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist)
colnames(ec)
class(ec)
class(ec$Streams)
-world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
sum(Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
sum(Streams)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
summarize(streams = sum(Streams))
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
filter(Artist == artist) %>%
summarize(Artist = Artist, streams = sum(Streams))
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
summarize(Streams = sum(Streams))
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
summarize(Streams = sum(Streams)) %>%
arrange()
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
summarize(Streams = sum(Streams)) %>%
arrange(-Streams)
View(.Last.value)
world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
summarize(Streams = sum(Streams)) %>%
arrange(-Streams) %>%
head(10)
most_streamed_artist <- world_top %>%
select(Track.Name, Artist, Streams, country_name) %>%
group_by(Artist) %>%
summarize(Streams = sum(Streams)) %>%
arrange(-Streams) %>%
head(input$top_num)
=======
install.packages(“devtools”)
devtools::install_github("gsimchoni/songsim")
shiny::runApp()
runApp()
runApp()
View(vals)
View(n)
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
View(us_top)
colnames(vals) <- c("Position", "Repetitiveness")
rep <- right_join(us_top, vals, by = "Postion")
rep <- right_join(us_top, vals, by = "Position")
View(rep)
rep <- right_join(us_top, vals, by = "Position") %>%
select(Track.Name, Artist, URL, Repetitiveness)
avg <- mean(vals$Position)
avg <- mean(vals$Repetitiveness)
#vals <- read.csv("data/calculated_sim.csv", stringsAsFactors = FALSE)
#avg <- mean(vals$Repetitiveness)
avg_rep <- 1.99
setwd("~/Desktop/final_project")
#colnames(vals) <- c("Position", "Repetitiveness")
#us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
rep <- right_join(us_top, vals, by = "Position") %>%
select(Track.Name, Artist, URL, Repetitiveness) %>%
mutate(Song = paste0("[", Track.Name, "](", URL, ")"))
#colnames(vals) <- c("Position", "Repetitiveness")
#us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
rep <- right_join(us_top, vals, by = "Position") %>%
mutate(Song = paste0("[", Track.Name, "](", URL, ")")) %>%
select(Song, Artist, Repetitiveness)
write.csv(rep, "repetitiveness.csv")
rep <- read.csv("repetitiveness.csv", stringsAsFactors = FALSE)
View(rep)
rep <- read.csv("repetitiveness.csv", stringsAsFactors = FALSE) %>%
select(Song, Artist, Repetitiveness)
runApp()
runApp()
runApp()
runApp()
#avg <- mean(vals$Repetitiveness)
#colnames(vals) <- c("Position", "Repetitiveness")
#us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
rep <- right_join(us_top, vals, by = "Position") %>%
mutate(Song = paste0("<a href =\"", URL, "\">", Track.Name, "</a>")) %>%
select(Song, Artist, Repetitiveness)
View(rep)
runApp()
runApp()
rep <- read.csv("repetitiveness.csv", stringsAsFactors = FALSE) %>%
select(Song, Artist, Repetitiveness)
runApp()
View(rep)
# for (i in 1:itrs) {
#   curr <- us_top[i,]
#   curr_artist <- curr$Artist
#   curr_song <- curr$Track.Name
#   ls [[i]] <- find_sim_val(curr_artist, curr_song)
# }
# ls[1:200]
# v <- unlist(ls, use.names = FALSE)
# df <- data.frame(v)
#write.csv("data/calculated_sim.csv")
vals <- read.csv("data/calculated_sim.csv", stringsAsFactors = FALSE)
#avg <- mean(vals$Repetitiveness)
#colnames(vals) <- c("Position", "Repetitiveness")
#us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
rep <- right_join(us_top, vals, by = "Position") %>%
mutate(Song = paste0("<a href =\"", URL, "\">", Track.Name, "</a>")) %>%
select(Song, Artist, Repetitiveness)
View(vals)
#avg <- mean(vals$Repetitiveness)
colnames(vals) <- c("Position", "Repetitiveness")
#us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
rep <- right_join(us_top, vals, by = "Position") %>%
mutate(Song = paste0("<a href =\"", URL, "\">", Track.Name, "</a>")) %>%
select(Song, Artist, Repetitiveness)
write.csv(rep, "repetitiveness.csv")
rep <- read.csv("repetitiveness.csv", stringsAsFactors = FALSE) %>%
select(Song, Artist, Repetitiveness)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Avg repetitiveness
avg_rep <- "1.99%"
runApp()
shiny::runApp()
runApp()
source("sentiment_func.R")
runApp()
runApp()
runApp()
shiny::runApp()
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
us_top <- us_top[order(us_top$Track.Name),]
View(us_top)
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 291daa42337d307b1cd052738c2ad4489759a3da
runApp()
