# Store the fraction (num/total) in your list as `frac_male_increase`.
# How many counties experienced an increase in female binge drinking between
# 2002 and 2012?
# Store the number in your list as `num_female_increase`.
# What fraction of counties experienced an increase in female binge drinking
# between 2002 and 2012?
# Store the fraction (num/total) in your list as `frac_female_increase`.
# How many counties experienced a rise in female binge drinking *and*
# a decline in male binge drinking?
# Store the number in your list as `num_f_increase_m_decrease`.
# Convert your list to a data frame, and write the results
# to the file `binge_info.csv`
# The next questions return *data frames as results*:
# What is the *minimum* level of binge drinking in each state in 2012 for
# both sexes (across the counties)? Your answer should contain roughly 50 values
# (one for each state), unless there are two counties in a state with the
# same value. Your answer should be a *dataframe* with the location, state, and
# 2012 binge drinking rate. Write this to a file called `min_binge.csv`.
# What is the *maximum* level of binge drinking in each state in 2012 for
# both sexes (across the counties)? Your answer should contain roughly 50 values
# (one for each state), unless there are two counties in a state with the
# same value. Your answer should be a *dataframe* with the location, state, and
# 2012 binge drinking rate. Write this to a file called `max_binge.csv`.
################################# Joining Data #################################
# You'll often have to join different datasets together in order to ask more
# involved questions of your dataset. In order to join our datasets together,
# you'll have to rename their columns to differentiate them.
# First, rename all prevalence columns in the any_drinking dataset to the
# have prefix "any_" (i.e., `males_2002` should now be `any_males_2002`)
# Hint: you can get (and set!) column names using the colnames function.
# This may take multiple lines of code.
# Then, rename all prevalence columns in the binge_drinking dataset to the have
# the prefix "binge_" (i.e., `males_2002` should now be `binge_males_2002`)
# This may take multiple lines of code.
# Then, create a dataframe by joining together the both datasets.
# Think carefully about the *type* of join you want to do, and what the
# *identifying columns* are. You will use this (joined) data to answer the
# questions below.
# Create a column `diff_2012` storing the difference between `any` and `binge`
# drinking for both sexes in 2012
# Which location has the greatest *absolute* difference between `any` and
# `binge` drinking? Your answer should be a one row data frame with the state,
# location, and column of interest (diff_2012).
# Write this dataframe to `biggest_abs_diff_2012.csv`.
# Which location has the smallest *absolute* difference between `any` and
# `binge` drinking? Your answer should be a one row data frame with the state,
# location, and column of interest (diff_2012).
# Write this dataframe to `smallest_abs_diff_2012.csv`.
############## Write a function to ask your own question(s) ####################
# Even in an entry level data analyst role, people are expected to come up with
# their own questions of interest (not just answer the questions that other
# people have). For this section, you should *write a function* that allows you
# to ask the same question on different subsets of data. For example, you may
# want to ask about the highest/lowest drinking level given a state or year.
# The purpose of your function should be evident given the input parameters and
# function name. After writing your function, *demonstrate* that the function
# works by passing in different parameters to your function.
################################### Challenge ##################################
# Using your function from part 1 that wrote a .csv file given a state name,
# write a separate file for each of the 51 states (including Washington D.C.)
# The challenge is to do this in a *single line of (very concise) code*
# Write a function that allows you to pass in a *dataframe* (i.e., in the format
# of binge_drinking or any_drinking) *year*, and *state* of interest. The
# function should saves a .csv file with observations from that state's counties
# (and the state itself). It should only write the columns `state`, `location`,
# and data from the specified year. Before writing the .csv file, you should
# *sort* the data.frame in descending order by the both_sexes drinking rate in
# the specified year. The file name should have the format:
# `DRINKING_STATE_YEAR.csv` (i.e. `any_Utah_2005.csv`).
# To write this function, you will either have to use a combination of dplyr
# and base R, or confront how dplyr uses *non-standard evaluation*
# Hint: https://github.com/tidyverse/dplyr/blob/34423af89703b0772d59edcd0f3485295b629ab0/vignettes/nse.Rmd
# Hint: https://www.r-bloggers.com/non-standard-evaluation-and-standard-evaluation-in-dplyr/
# Create the file `binge_Colorado_2007.csv` using your function.
install.packages(httr)
install.packages("httr")
install.packages("jsonlite")
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
address <- "17272 NE 104th St, Redmond, WA 98052"
base_uri <- "https://www.googleapis.com/civicinfo/v2"
rep_endpoint <- "/representatives"
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
base_uri <- "https://api.propublica.org/congress/v1/"
add <- address
propublica_key <- "PquImXKGZFWV976RU1sUCXgKeEO6jutOvOpi5aUV"
google_civic_key <- "AIzaSyCLdoPpmnJ6OXkaVbTZmxJBi3QgKFvmyas"
params <- list(key = google_civic_key, address = address)
uri_full <- paste0(base_uri, rep_endpoint)
params <- list(key = google_civic_key, address = address)
GET (uri_full, query = params)
response <- GET (uri_full, query = params)
View(response)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET (uri_full, address = address, key = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, address = address, "api-key" = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, query= address, "api-key" = google_civic_key)
response <- GET (uri_full, query = address, "api-key" = google_civic_key)
results <- fromJSON(content(response, "text"))
View(results)
add <- "17272 NE 104th St, Redmond, WA 98052"
response <- GET (uri_full, address = add, "api-key" = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, address = add, "key" = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, "key" = google_civic_key, "add" = add)
results <- fromJSON(content(response, "text"))
addr <- "17272 NE 104th St, Redmond, WA 98052"
response <- GET (uri_full, "key" = google_civic_key, "add" = addr)
response <- GET (uri_full, "key" = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET (uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, "key" = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, "key" = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET(uri_full, key = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
View(results)
View(response)
base_uri <- "https://www.googleapis.com/civicinfo/v2"
rep_endpoint <- "/representatives"
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
uri_full <- paste0(base_uri, rep_endpoint)
# params <- list(key = google_civic_key, address = address)
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
View(results)
# params <- list(key = google_civic_key, address = address)
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(base_uri, rep_endpoint)
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
View(response)
View(results)
results[["error"]][["message"]]
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, "key" = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
View(results)
View(response)
# address from civic-info.R
p_base_uri <- "https://api.propublica.org/congress/v1/"
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, "key" = google_civic_key, query = addr)
results <- fromJSON(content(response, "text"))
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, key = google_civic_key, query = addr)
results <- fromJSON(content(response, "text"))
View(results)
params <- list(address = addr)
response <- GET(ci_uri_full, key = google_civic_key, query = addr)
results <- fromJSON(content(response, "text"))
View(response)
params <- list(key = google_civic_key, address = addr)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
View(results)
results[["error"]][["message"]]
results[["error"]][["message"]]
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
View(response)
View(results)
reps <- flatten(results$officials)
View(reps)
officials <- flatten(results$officials)
offices <- flatten(results$offices)
p_endpoint <- "/members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
# addr from civic-info.R
state <- "WA"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
View(p_full_uri)
print(p_full_uri)
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
print(p_full_uri)
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
View(response)
View(results)
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
View(response)
View(results)
offices <- results$offices
View(offices)
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
officials <- officials %>% mutate(index = row_number() - 1)
View(officials)
View(expanded)
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
print(p_full_uri)
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
View(results)
View(results)
reps <- results$results
View(reps)
reps_gender <- reps %>%
select(name, gender)
View(reps_gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
View(specific_rep)
spec_name <- specific_rep$name
spec_id <- specific_rep$id
member <- paste0(p_base_uri, p_endpoing, "/", spec_id, ".json")
member <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
member <- response <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes <- response <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
View(votes)
View(votes)
member <- member$results
votes <- votes$results
View(votes)
View(specific_rep)
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes$votes
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$votes
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$results$votes
View(votes)
votes <- votes$results
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes[["results"]][["votes"]][[1]]
votes <- votes$results$votes
View(votes)
votes <- votes$results$votes[1]
votes <- votes[["results"]][["votes"]][[1]]
votes <- votes[["results"]][["votes"]][[1]]
View(votes[["results"]][["votes"]][[1]])
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes[["results"]][["votes"]][[1]]
View(votes)
source("civic-info.R")
source("propublica.R")
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
offices <- results$offices
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() - 1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
offices <- results$offices
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() - 1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
---
title: "Congressional Representatives"
author: "Renee Wang"
date: "2/19/2019"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = F)
source("civic-info.R")
source("propublica.R")
```
## An Introduction to Congressional Representation
This report describes the US congressional representation details for the people living at `r addr`. This information is based on the data supplied by the [ProPublica Congress API](https://projects.propublica.org/api-docs/congress-api/) and the [Google Civic Information API](https://developers.google.com/civic-information/). Not only does this report provide information on **who** the representatives are for `r addr`, it also provides information on **how** these people can be contacted, if that information is available. Finally, not only does this report contain information for _national_ representatives, it also reports information for _state_ level representatives.
## `r spec_name`
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
source("propublica.R")
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
# addr from civic-info.R
state <- "WA"
p_base_uri <- "https://api.propublica.org/congress/v1/"
# 115th congress
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
reps <- results$results
reps_gender <- reps %>%
select(name, gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
spec_id <- specific_rep$id
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
member <- member$results
votes <- votes[["results"]][["votes"]][[1]]
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
# addr from civic-info.R
state <- "WA"
p_base_uri <- "https://api.propublica.org/congress/v1/"
# 115th congress
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
reps <- results$results
reps_gender <- reps %>%
select(name, gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
spec_id <- specific_rep$id
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
member <- member$results
votes <- votes[["results"]][["votes"]][[1]]
View(member)
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET uri
GET(uri)
library("httr")
library("jsonlite")
library("dplyr")
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET(uri)
GET(uri, token = "BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET uri -H "Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
ans <- find_sim("MAGIC!", "Rude")
library(genius)
library(tidyverse)
library(dplyr)
library(songsim)
find_sim <- function(artist_name, song_name) {
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
write.table(song_lyrics, "lyrics.txt",
row.names = FALSE,
quote = FALSE,
col.names = FALSE)
bestsongsim <- songsim("lyrics.txt", colorfulMode = TRUE,
mainTitle = paste0(song_name, " - ", artist_name))
bestsongsim
}
ans <- find_sim("MAGIC!", "Rude")
ans <- find_sim("Afterglow", "Scarlet Sky")
ans <- find_sim("One Direction", "What Makes You Beautiful")
shiny::runApp('Desktop/final_project')
# server.R
library(shiny)
library(ggplot2)
library(dplyr)
library(lintr)
library(genius)
library(tidyverse)
library(songsim)
library(syuzhet)
source("sentiment_func.R")
source("sim_function.R")
setwd("~/Desktop/final_project")
runApp()
setwd("~/Desktop/final_project")
source("sentiment_func.R")
source("sim_function.R")
us_top <- read.csv("us_top200.csv", stringsAsFactors = FALSE)
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
runApp()
runApp('~/Desktop')
runApp('~/Desktop')
setwd("~/Desktop")
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
runApp('final_project')
shiny::runApp()
runApp()
setwd("~/Desktop/final_project")
runApp()
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
runApp()
shiny::runApp()
us_top <- read.csv("us_top200.csv", stringsAsFactors = FALSE)
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/final_project")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
shiny::runApp()
setwd("~/Desktop/final_project")
shiny::runApp()
runApp()
