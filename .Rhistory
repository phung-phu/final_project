results <- fromJSON(content(response, "text"))
response <- GET (uri_full, address = address, "api-key" = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, query= address, "api-key" = google_civic_key)
response <- GET (uri_full, query = address, "api-key" = google_civic_key)
results <- fromJSON(content(response, "text"))
View(results)
add <- "17272 NE 104th St, Redmond, WA 98052"
response <- GET (uri_full, address = add, "api-key" = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, address = add, "key" = google_civic_key)
results <- fromJSON(content(response, "text"))
response <- GET (uri_full, "key" = google_civic_key, "add" = add)
results <- fromJSON(content(response, "text"))
addr <- "17272 NE 104th St, Redmond, WA 98052"
response <- GET (uri_full, "key" = google_civic_key, "add" = addr)
response <- GET (uri_full, "key" = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET (uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, "key" = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, "key" = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET(uri_full, key = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
View(results)
View(response)
base_uri <- "https://www.googleapis.com/civicinfo/v2"
rep_endpoint <- "/representatives"
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
uri_full <- paste0(base_uri, rep_endpoint)
# params <- list(key = google_civic_key, address = address)
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
View(results)
# params <- list(key = google_civic_key, address = address)
response <- GET(uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(base_uri, rep_endpoint)
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, key = google_civic_key, address = addr)
results <- fromJSON(content(response, "text"))
View(response)
View(results)
results[["error"]][["message"]]
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, "key" = google_civic_key, "address" = addr)
results <- fromJSON(content(response, "text"))
View(results)
View(response)
# address from civic-info.R
p_base_uri <- "https://api.propublica.org/congress/v1/"
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, "key" = google_civic_key, query = addr)
results <- fromJSON(content(response, "text"))
# params <- list(key = google_civic_key, address = address)
response <- GET(ci_uri_full, key = google_civic_key, query = addr)
results <- fromJSON(content(response, "text"))
View(results)
params <- list(address = addr)
response <- GET(ci_uri_full, key = google_civic_key, query = addr)
results <- fromJSON(content(response, "text"))
View(response)
params <- list(key = google_civic_key, address = addr)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
View(results)
results[["error"]][["message"]]
results[["error"]][["message"]]
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
View(results)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
View(response)
View(results)
reps <- flatten(results$officials)
View(reps)
officials <- flatten(results$officials)
offices <- flatten(results$offices)
p_endpoint <- "/members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
# addr from civic-info.R
state <- "WA"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
View(p_full_uri)
print(p_full_uri)
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
print(p_full_uri)
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
View(response)
View(results)
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
View(response)
View(results)
offices <- results$offices
View(offices)
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
officials <- officials %>% mutate(index = row_number() - 1)
View(officials)
View(expanded)
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.JSON")
print(p_full_uri)
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
View(results)
View(results)
reps <- results$results
View(reps)
reps_gender <- reps %>%
select(name, gender)
View(reps_gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
View(specific_rep)
spec_name <- specific_rep$name
spec_id <- specific_rep$id
member <- paste0(p_base_uri, p_endpoing, "/", spec_id, ".json")
member <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
member <- response <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes <- response <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
View(votes)
View(votes)
member <- member$results
votes <- votes$results
View(votes)
View(specific_rep)
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes$votes
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$votes
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$results$votes
View(votes)
votes <- votes$results
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes[["results"]][["votes"]][[1]]
votes <- votes$results$votes
View(votes)
votes <- votes$results$votes[1]
votes <- votes[["results"]][["votes"]][[1]]
votes <- votes[["results"]][["votes"]][[1]]
View(votes[["results"]][["votes"]][[1]])
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes[["results"]][["votes"]][[1]]
View(votes)
source("civic-info.R")
source("propublica.R")
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
offices <- results$offices
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() - 1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
offices <- results$offices
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() - 1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
---
title: "Congressional Representatives"
author: "Renee Wang"
date: "2/19/2019"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = F)
source("civic-info.R")
source("propublica.R")
```
## An Introduction to Congressional Representation
This report describes the US congressional representation details for the people living at `r addr`. This information is based on the data supplied by the [ProPublica Congress API](https://projects.propublica.org/api-docs/congress-api/) and the [Google Civic Information API](https://developers.google.com/civic-information/). Not only does this report provide information on **who** the representatives are for `r addr`, it also provides information on **how** these people can be contacted, if that information is available. Finally, not only does this report contain information for _national_ representatives, it also reports information for _state_ level representatives.
## `r spec_name`
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
source("propublica.R")
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
# addr from civic-info.R
state <- "WA"
p_base_uri <- "https://api.propublica.org/congress/v1/"
# 115th congress
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
reps <- results$results
reps_gender <- reps %>%
select(name, gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
spec_id <- specific_rep$id
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
member <- member$results
votes <- votes[["results"]][["votes"]][[1]]
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
# addr from civic-info.R
state <- "WA"
p_base_uri <- "https://api.propublica.org/congress/v1/"
# 115th congress
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
reps <- results$results
reps_gender <- reps %>%
select(name, gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
spec_id <- specific_rep$id
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
member <- member$results
votes <- votes[["results"]][["votes"]][[1]]
View(member)
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET uri
GET(uri)
library("httr")
library("jsonlite")
library("dplyr")
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET(uri)
GET(uri, token = "BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET uri -H "Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
ans <- find_sim("MAGIC!", "Rude")
library(genius)
library(tidyverse)
library(dplyr)
library(songsim)
find_sim <- function(artist_name, song_name) {
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
write.table(song_lyrics, "lyrics.txt",
row.names = FALSE,
quote = FALSE,
col.names = FALSE)
bestsongsim <- songsim("lyrics.txt", colorfulMode = TRUE,
mainTitle = paste0(song_name, " - ", artist_name))
bestsongsim
}
ans <- find_sim("MAGIC!", "Rude")
ans <- find_sim("Afterglow", "Scarlet Sky")
ans <- find_sim("One Direction", "What Makes You Beautiful")
shiny::runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop/final_project')
runApp('Desktop/final_project')
runApp('Desktop/final_project')
shiny::runApp('Desktop/final_project')
shiny::runApp('Desktop/final_project')
rainbow()
# Test Code
n <- get_sent("Post Malone", "rockstar")
View(n)
palette_fn <- colorFactor(palette = "Set1")
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = palette_fn
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = palette("Set1"),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
g <- get_graph(n)
View(g)
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.5),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = colors(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = colors(10),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
setwd("~/Desktop/final_project")
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
library(genius)
library(tidyverse)
library(dplyr)
library(songsim)
library(syuzhet)
get_sent <- function(artist_name, song_name) {
song_name <- gsub("\\s*\\[[^\\)]+\\]","", song_name)
song_name <- gsub("\\s*\\([^\\)]+\\)","", song_name)
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
words <- song_lyrics$lyric
nrc <- get_nrc_sentiment(words)
nrc
}
get_graph <- function(nrc) {
barplot(
sort(colSums(prop.table(nrc[, 1:8]))),
col = rainbow(10, s = 0.7),
horiz = TRUE,
cex.names = 0.7,
las = 1,
main = "Song Emotions", xlab="Percentage"
)
}
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
shiny::runApp()
# Test Code
n <- get_sent("Post Malone", "rockstar")
get_graph(n)
runApp()
runApp()
