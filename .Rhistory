member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
View(votes)
View(votes)
member <- member$results
votes <- votes$results
View(votes)
View(specific_rep)
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes$votes
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$votes
votes <- fromJSON(content(votes_res, "text"))
votes <- votes$results$votes
View(votes)
votes <- votes$results
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
votes <- votes$results
votes <- fromJSON(content(votes_res, "text"))
votes[["results"]][["votes"]][[1]]
votes <- votes$results$votes
View(votes)
votes <- votes$results$votes[1]
votes <- votes[["results"]][["votes"]][[1]]
votes <- votes[["results"]][["votes"]][[1]]
View(votes[["results"]][["votes"]][[1]])
votes <- fromJSON(content(votes_res, "text"))
View(votes)
votes <- votes[["results"]][["votes"]][[1]]
View(votes)
source("civic-info.R")
source("propublica.R")
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
offices <- results$offices
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() - 1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
addr <- "17272 NE 104th St, Redmond, WA 98052"
ci_base_uri <- "https://www.googleapis.com/civicinfo/v2"
ci_rep_endpoint <- "/representatives"
ci_uri_full <- paste0(ci_base_uri, ci_rep_endpoint)
params <- list(key = google_civic_key, address = addr)
response <- GET(ci_uri_full, query = params)
results <- fromJSON(content(response, "text"))
offices <- results$offices
officials <- results$officials
num_to_rep <- unlist(lapply(results$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num_to_rep),]
officials <- officials %>% mutate(index = row_number() - 1)
expanded <- expanded %>% mutate(index = row_number() - 1) %>%
rename(position = name)
---
title: "Congressional Representatives"
author: "Renee Wang"
date: "2/19/2019"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = F)
source("civic-info.R")
source("propublica.R")
```
## An Introduction to Congressional Representation
This report describes the US congressional representation details for the people living at `r addr`. This information is based on the data supplied by the [ProPublica Congress API](https://projects.propublica.org/api-docs/congress-api/) and the [Google Civic Information API](https://developers.google.com/civic-information/). Not only does this report provide information on **who** the representatives are for `r addr`, it also provides information on **how** these people can be contacted, if that information is available. Finally, not only does this report contain information for _national_ representatives, it also reports information for _state_ level representatives.
## `r spec_name`
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
source("propublica.R")
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
# addr from civic-info.R
state <- "WA"
p_base_uri <- "https://api.propublica.org/congress/v1/"
# 115th congress
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
reps <- results$results
reps_gender <- reps %>%
select(name, gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
spec_id <- specific_rep$id
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
member <- member$results
votes <- votes[["results"]][["votes"]][[1]]
library("httr")
library("jsonlite")
library("dplyr")
source("api-keys.R")
source("civic-info.R")
# addr from civic-info.R
state <- "WA"
p_base_uri <- "https://api.propublica.org/congress/v1/"
# 115th congress
p_endpoint <- "members"
p_full_uri <- paste0(p_base_uri, p_endpoint, "/house/", state, "/current.json")
response <- GET(p_full_uri, add_headers("X-API-Key" = propublica_key))
results <- fromJSON(content(response, "text"))
reps <- results$results
reps_gender <- reps %>%
select(name, gender)
reps_party <- reps %>%
select(name, party)
specific_rep <- reps[1,]
spec_id <- specific_rep$id
member_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, ".json")
votes_uri <- paste0(p_base_uri, p_endpoint, "/", spec_id, "/votes.json")
member_res <- GET(member_uri, add_headers("X-API-Key" = propublica_key))
votes_res <- GET(votes_uri, add_headers("X-API-Key" = propublica_key))
member <- fromJSON(content(member_res, "text"))
votes <- fromJSON(content(votes_res, "text"))
member <- member$results
votes <- votes[["results"]][["votes"]][[1]]
View(member)
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET uri
GET(uri)
library("httr")
library("jsonlite")
library("dplyr")
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET(uri)
GET(uri, token = "BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
base <- "https://api.spotify.com/v1"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET uri -H "Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"
uri <- paste0(base, "/v1/audio-analysis/5Ohxk2dO5COHF1krpoPigN")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5")
GET(uri, add_headers("Authorization: Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
GET(uri, add_headers("Authorization" = "Bearer BQD8z46T0irCvF2n70lYTiIQPrdQg7Snjo-mYy_fHgTS2VbehRXw-Uu3gp6dnXjRRP5LceKjfCKjSV5wNeWI_c-KQu8kPjNssmmMTJ-W6h39pC6ZnxHeMj3g3EVEYx5ZpVZkw5oic3VlYhU5"))
ans <- find_sim("MAGIC!", "Rude")
library(genius)
library(tidyverse)
library(dplyr)
library(songsim)
find_sim <- function(artist_name, song_name) {
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
write.table(song_lyrics, "lyrics.txt",
row.names = FALSE,
quote = FALSE,
col.names = FALSE)
bestsongsim <- songsim("lyrics.txt", colorfulMode = TRUE,
mainTitle = paste0(song_name, " - ", artist_name))
bestsongsim
}
ans <- find_sim("MAGIC!", "Rude")
ans <- find_sim("Afterglow", "Scarlet Sky")
ans <- find_sim("One Direction", "What Makes You Beautiful")
shiny::runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop/final_project')
runApp('Desktop/final_project')
runApp('Desktop/final_project')
# Test Code
find_sim_val("Taylor Swift", "Enchanted")
find_sim_val <- function(artist_name, song_name) {
find_sim(artist_name, song_name)$repetitiveness
}
# Test Code
find_sim_val("Taylor Swift", "Enchanted")
find_sim <- function(artist_name, song_name) {
song_name <- gsub("\\s*\\[[^\\)]+\\]","", song_name)
song_name <- gsub("\\s*\\([^\\)]+\\)","", song_name)
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
write.table(song_lyrics, "lyrics.txt",
row.names = FALSE,
quote = FALSE,
col.names = FALSE)
bestsongsim <- songsim("lyrics.txt", colorfulMode = TRUE,
mainTitle = paste0(song_name, " - ", artist_name))
bestsongsim
}
library(genius)
library(tidyverse)
library(dplyr)
library(songsim)
find_sim <- function(artist_name, song_name) {
song_name <- gsub("\\s*\\[[^\\)]+\\]","", song_name)
song_name <- gsub("\\s*\\([^\\)]+\\)","", song_name)
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
write.table(song_lyrics, "lyrics.txt",
row.names = FALSE,
quote = FALSE,
col.names = FALSE)
bestsongsim <- songsim("lyrics.txt", colorfulMode = TRUE,
mainTitle = paste0(song_name, " - ", artist_name))
bestsongsim
}
find_sim_val <- function(artist_name, song_name) {
find_sim(artist_name, song_name)$repetitiveness
}
# Test Code
find_sim_val("Taylor Swift", "Enchanted")
find_sim_val <- function(artist_name, song_name) {
find_sim(artist_name, song_name)$repetitiveness * 100
}
# Test Code
find_sim_val("Taylor Swift", "Enchanted")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/final_project")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
find_sim_val <- function(df) {
artist_name <- df$Artist
song_name <- df$Track.Name
find_sim(artist_name, song_name)$repetitiveness * 100
}
sapply(us_top, find_sim_val)
find_sim_val <- function(df) {
artist_name <- df[[Artist]]
song_name <- df[[Track.Name]]
find_sim(artist_name, song_name)$repetitiveness * 100
}
sapply(us_top, find_sim_val)
View(us_top)
find_sim_val <- function(df) {
artist_name <- df[,Artist]
song_name <- df[,Track.Name]
find_sim(artist_name, song_name)$repetitiveness * 100
}
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
sapply(us_top, find_sim_val)
lapply(us_top, find_sim_val)
find_sim_val <- function(df) {
artist_name <- df[,"Artist"]
song_name <- df[,"Track.Name"]
find_sim(artist_name, song_name)$repetitiveness * 100
}
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
lapply(us_top, find_sim_val)
find_sim_val <- function(df) {
artist_name <- df[,"Artist"]
song_name <- df[,"Track.Name"]
lapply(us_top, find_sim)
#find_sim(artist_name, song_name)$repetitiveness * 100
}
find_sim_val(us_top)
find_sim_val <- function(df) {
artist_name <- df[,"Artist"]
song_name <- df[,"Track.Name"]
sapply(us_top, find_sim)
#find_sim(artist_name, song_name)$repetitiveness * 100
}
find_sim_val(us_top)
find_sim_val <- function(df) {
artist_name <- df[,"Artist"]
song_name <- df[,"Track.Name"]
sapply(us_top, find_sim(artist_name, song_name))
#find_sim(artist_name, song_name)$repetitiveness * 100
}
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
find_sim_val(us_top)
find_sim_val <- function(artist_name, song_name) {
find_sim(artist_name, song_name)$repetitiveness * 100
}
# Test Code
find_sim_val("Taylor Swift", "Enchanted")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
itrs <- nrow(us_top)
ls <- vector("vals", length = itrs)
ls <- vector("list", length = itrs)
for (i in 1:itrs) {
curr <- us_top[1,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(ls)
for (i in 1:itrs) {
curr <- us_top[i,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(ls)
get_lyrics("Offset", "Ric Flair Drip")
get_lyrics <- function(artist_name, song_name) {
song_name <- gsub("\\s*\\[[^\\)]+\\]","", song_name)
song_name <- gsub("\\s*\\([^\\)]+\\)","", song_name)
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
}
get_lyrics("Offset", "Ric Flair Drip")
get_lyrics("Offset and Metro Boomin", "Ric Flair Drip")
get_lyrics <- function(artist_name, song_name) {
song_name <- gsub("\\s*\\[[^\\)]+\\]","", song_name)
song_name <- gsub("\\s*\\([^\\)]+\\)","", song_name)
song_lyrics <- genius_lyrics(artist = artist_name, song = song_name) %>%
select(lyric) %>%
filter(lyric != "NA")
song_lyrics
}
get_lyrics("Offset and Metro Boomin", "Ric Flair Drip")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
itrs <- nrow(us_top)
ls <- vector("list", length = itrs)
for (i in 1:itrs) {
curr <- us_top[i,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(ls)
get_lyrics("21 Savage, Offset, and Metro Boomin", "Ghostface Killers")
get_lyrics("Migos", "Slippery (feat. Gucci Mane)")
get_lyrics("BTS", "MIC Drop (feat. Desiigner) [Steve Aoki Remix])
get_lyrics("BTS", "MIC Drop (feat. Desiigner) [Steve Aoki Remix]")
get_lyrics("BTS", "MIC Drop (feat. Desiigner) [Steve Aoki Remix]")
# Test Code
find_sim_val("BTS", "MIC Drop (feat. Desiigner) [Steve Aoki Remix]")
get_lyrics("Big Sean", "Go Legend (& Metro Boomin)")
get_lyrics("Big Sean and Metro Boomin", "Go Legend (& Metro Boomin)")
get_lyrics("Jason Derulo", "Tip Toe (feat. French Montana)")
get_lyrics("KYLE", "iSpy (feat. Lil Yachty)")
get_lyrics("Migos", "Bad and Boujee (feat. Lil Uzi Vert)")
get_lyrics("Lil Skies", "Red Roses (feat. Landon Cube)")
get_lyrics("Lil Uzi Vert", "The Way Life Goes (feat. Nicki Minaj & Oh Wonder) - Remix")
get_lyrics("Macklemore", "Glorious (feat. Skylar Grey)")
get_lyrics("Trouble", "Bring It Back (with Drake & Mike WiLL Made-It)")
get_lyrics("21 Savage", "X (feat. Future)")
get_lyrics("ZAYN and Taylor Swift", "I Don't Wanna Live Forever (Fifty Shades Darker)")
get_lyrics("ZAYN and Taylor Swift", "I Dont Wanna Live Forever (Fifty Shades Darker)")
get_lyrics("Macklemore", "Good Old Days (feat. Kesha)")
get_lyrics("DRAM", "Broccoli (feat. Lil Yachty)")
get_lyrics("Tee Grizzley", "From The D To The A (feat. Lil Yachty)")
get_lyrics("Big Sean", "So Good (& Metro Boomin)")
get_lyrics("Big Sean and Metro Boomin", "So Good (& Metro Boomin)")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
itrs <- nrow(us_top)
ls <- vector("list", length = itrs)
for (i in 1:itrs) {
curr <- us_top[i,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(ls)
get_lyrics("James Arthur", "Say You Wont Let Go")
get_lyrics("Young Thug", "Relationship (feat. Future)")
get_lyrics("Trippie Redd", "Dark Knight Dummo (Feat. Travis Scott)")
get_lyrics("ZAYN", "Dusk Till Dawn - Radio Edit")
# Test Code
find_sim_val("Bruno Mars", "That's What I Like")
# Test Code
find_sim_val("Bruno Mars", "Thats What I Like")
get_lyrics("Kodak Black", "Transportin'")
get_lyrics("2 Chainz", "It's A Vibe")
get_lyrics("2 Chainz", "Its A Vibe")
get_lyrics("DJ Khaled", "I'm the One")
get_lyrics("DJ Khaled", "Im the One")
get_lyrics("Huncho Jack", "Black & Chinese")
get_lyrics("Playboi Cardi", "wokeuplikethis*")
get_lyrics("Playboi Cardi", "wokeuplikethis")
get_lyrics("Playboi Carti", "wokeuplikethis*")
get_lyrics("XXXTENTACION", "Look At Me!")
get_lyrics("Shawn Mendes", "Theres Nothing Holdin Me Back")
get_lyrics("Bryson Tiller", "Dont")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
itrs <- nrow(us_top)
ls <- vector("list", length = itrs)
for (i in 1:itrs) {
curr <- us_top[i,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(ls)
get_lyrics("Brett Young", "In Case You Didnt Know")
get_lyrics("N.E.R.D", "Lemon")
get_lyrics("NERD", "Lemon")
get_lyrics("Amine", "Caroline")
get_lyrics("NAV", "Myself")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
itrs <- nrow(us_top)
View(us_top)
for (i in 1:itrs) {
curr <- us_top[i,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(us_top)
View(ls)
get_lyrics("Trippie Redd", "Poles 1469")
get_lyrics("Trippie Redd", "Poles1469")
us_top <- read.csv("data/us_top200.csv", stringsAsFactors = FALSE)
itrs <- nrow(us_top)
View(us_top)
for (i in 1:itrs) {
curr <- us_top[i,]
curr_artist <- curr$Artist
curr_song <- curr$Track.Name
ls [[i]] <- find_sim_val(curr_artist, curr_song)
}
View(ls)
ls$Value
ls[Value]
ls["Value"]
ls[,"Value"]
ls[[1:200]]
ls[[1]]$Value
ls[1]$Value
ls[2]$Value
ls
ls[[1:200]][1]
ls[1]
ls[2]
ls[1:200]
as.vector(ls[1:200])
v <- as.vector(ls[1:200])
View(v)
write.csv("v", "data/calculated_sim.csv")
v <- as.df(ls[1:200])
v <- data.frame(ls[1:200])
View(v)
v <- data.frame(as.Vector(ls[1:200])
View(v)
v <- data.frame(as.vector(ls[1:200]))
View(v)
v <- v[1,]
View(v)
nums <- v[1,]
nums <- v[[1]]
nums <- v[[1:200]]
nums <- v[[2]]
nums <- v[[1:200]][1]
write.csv("v", "data/calculated_sim.csv")
v <- data.frame(as.vector(ls[1:200]))
write.csv("v", "data/calculated_sim.csv")
v <- unlist(ls, use.names = FALSE)
write.csv("v", "data/calculated_sim.csv")
df <- data.frame(v)
View(df)
write.csv(df, "data/calculated_sim.csv")
avg <- mean(v)
print(avg)
avg <- 1.969785
vals <- read.csv(calculated_sim.csv, stringsAsFactors = FALSE)
vals <- read.csv("data/calculated_sim.csv", stringsAsFactors = FALSE)
View(vals)
shiny::runApp()
shiny::runApp()
runApp()
setwd("~/Desktop/final_project")
# Test Code
find_sim("Khalid", "Location")
# Test Code
find_sim("Justin Bieber", "Baby")
# Test Code
find_sim("Taylor Swift", "We Are Never Ever Getting Back Together")
vals <- read.csv("data/calculated_sim.csv", stringsAsFactors = FALSE)
View(vals)
runApp()
runApp()
